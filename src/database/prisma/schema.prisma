datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    username String @unique
    password String

    avatar      String?
    name        String
    sex         Int
    phoneNumber String
    email       String
    dob         DateTime
    address     String
    joinAt      DateTime

    token String?
    role  String

    events      Event[]
    projects    Project[]
    requests    Request[]
    salaries    Salary[]
    attendances Attendance[]
}

model Attendance {
    id       Int       @id @default(autoincrement())
    checkIn  DateTime?
    checkOut DateTime?
    status   Int

    User   User? @relation(fields: [userId], references: [id])
    userId Int?
}

model Salary {
    id       Int      @id @default(autoincrement())
    createAt DateTime
    value    BigInt
    note     String?

    User   User? @relation(fields: [userId], references: [id])
    userId Int?
}

model Request {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())

    name String
    type Int

    dayOffRequest   DayOffRequest? @relation(fields: [dayOffRequestId], references: [id])
    dayOffRequestId Int?

    salaryRequest   SalaryRequest? @relation(fields: [salaryRequestId], references: [id])
    salaryRequestId Int?

    supportRequest   SupportRequest? @relation(fields: [supportRequestId], references: [id])
    supportRequestId Int?

    sender User @relation(fields: [userId], references: [id])
    userId Int

    status Int
    reply  String?
}

model DayOffRequest {
    id      Int       @id @default(autoincrement())
    reason  Int
    content String?
    Request Request[]
}

model SalaryRequest {
    id      Int       @id @default(autoincrement())
    reason  Int
    content String?
    Request Request[]
}

model SupportRequest {
    id      Int       @id @default(autoincrement())
    content String
    Request Request[]
}

model News {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())

    thumbnail String?
    name      String
    content   Json
}

model Event {
    id        Int      @id @default(autoincrement())
    createAt  DateTime @default(now())
    expiredAt DateTime

    name    String
    from    DateTime
    to      DateTime
    address String

    participants User[]
}

model Project {
    id       Int       @id @default(autoincrement())
    startAt  DateTime
    finishAt DateTime?

    name    String
    content Json

    participants User[]
}

model Notification {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())

    name    String
    content String
}

model Role {
    name String @id
}

model Permission {
    name String
    role String

    @@id([name, role])
}
