datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())
    updateAt DateTime @updatedAt

    username String @unique
    password String

    avatar      String?
    name        String
    sex         Int
    phoneNumber String
    email       String
    dob         DateTime
    address     String
    joinAt      DateTime

    token String?
    role  String

    events           Event[]
    projectsAsLeader Project[]    @relation("leader")
    projectsAsMember Project[]    @relation("members")
    requests         Request[]
    salaries         Salary[]
    attendances      Attendance[]
    skills           Skill[]
}

model Attendance {
    id       Int       @id @default(autoincrement())
    checkIn  DateTime?
    checkOut DateTime?
    status   Int

    User   User? @relation(fields: [userId], references: [id])
    userId Int?
}

model Salary {
    id       Int      @id @default(autoincrement())
    createAt DateTime
    value    BigInt
    note     String?

    User   User? @relation(fields: [userId], references: [id])
    userId Int?
}

model Request {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())

    name    String
    content Json
    type    Int

    status Int
    reply  String?

    sender User @relation(fields: [userId], references: [id])
    userId Int
}

model News {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())

    thumbnail String?
    name      String
    content   Json
}

model Event {
    id        Int      @id @default(autoincrement())
    createAt  DateTime @default(now())
    expiredAt DateTime

    name    String
    from    DateTime
    to      DateTime
    address String

    participants User[]
}

model Project {
    id       Int       @id @default(autoincrement())
    startAt  DateTime
    finishAt DateTime?

    name    String
    skills  Skill[]
    content Json

    leader   User @relation("leader", fields: [leaderId], references: [id])
    leaderId Int

    members User[] @relation("members")
}

model Skill {
    id   Int    @id @default(autoincrement())
    name String
    type Int

    projects Project[]
    users    User[]
}

model Notification {
    id       Int      @id @default(autoincrement())
    createAt DateTime @default(now())

    name    String
    content String
}

model Role {
    name String @id
}

model Permission {
    name String
    role String

    @@id([name, role])
}

model File {
    id      Int    @id @default(autoincrement())
    content String
}
